Some weights of the model checkpoint at albert-base-v2 were not used when initializing AlbertForSequenceClassification: ['predictions.bias', 'predictions.LayerNorm.weight', 'predictions.LayerNorm.bias', 'predictions.dense.weight', 'predictions.dense.bias', 'predictions.decoder.weight', 'predictions.decoder.bias']
- This IS expected if you are initializing AlbertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPretraining model).
- This IS NOT expected if you are initializing AlbertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of AlbertForSequenceClassification were not initialized from the model checkpoint at albert-base-v2 and are newly initialized: ['classifier.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
using device cuda
Using custom data configuration default
  0%|                                                                                                                                                                                            | 0/9427 [00:00<?, ?it/s]  0%|▏                                                                                                                                                                                 | 9/9427 [00:00<00:07, 1185.95it/s]
tensor([[   2,  107, 2585,  ...,    0,    0,    0],
        [   2,  107,  254,  ...,    0,    0,    0],
        [   2,   25, 1936,  ...,    0,    0,    0],
        ...,
        [   2,   25,   14,  ...,    0,    0,    0],
        [   2,  144, 7205,  ...,    0,    0,    0],
        [   2,   25, 8974,  ...,    0,    0,    0]]) tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]]) tensor([[1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        ...,
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0]]) tensor([1, 1, 1, 1, 0, 0, 0, 0, 1, 1])
Using custom data configuration default
  0%|                                                                                                                                                                                            | 0/3270 [00:00<?, ?it/s]  0%|▍                                                                                                                                                                                 | 9/3270 [00:00<00:02, 1539.01it/s]
tensor([[    2,   630, 25790,  ...,     0,     0,     0],
        [    2,    25,   191,  ...,     0,     0,     0],
        [    2,    25,  1257,  ...,     0,     0,     0],
        ...,
        [    2,    25,    80,  ...,     0,     0,     0],
        [    2,    92,   287,  ...,     0,     0,     0],
        [    2,    25,    80,  ...,     0,     0,     0]]) tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]]) tensor([[1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        ...,
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0]]) tensor([0, 1, 1, 1, 1, 0, 1, 1, 1, 1])
